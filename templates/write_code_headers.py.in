#!/usr/bin/env python
#
# Scans a source tree for python files and writes the header template on top of each file

import os
import sys
import optparse
from datetime import datetime


TEMPLATE = """# -*- coding: utf-8 -*-
#
# This file is part of Bika LIMS
#
# Copyright 2011-{current_year} by it's authors.
# Some rights reserved. See LICENSE.txt, AUTHORS.txt.
"""

def get_template():
    template_data = {
        "current_year": datetime.now().strftime("%Y"),
    }
    return TEMPLATE.format(**template_data)


if __name__ == "__main__":

    parser = optparse.OptionParser()

    parser.add_option('-d', '--directory',
                      dest='directory',
                      default='${buildout:directory}/bika/lims',
                      help='Source code directory to scan [default: %default]')

    parser.add_option('-e', '--extensions',
                      dest='extensions',
                      default='.py',
                      help='Comma separated list of file extensions [default: %default]')

    options, args = parser.parse_args(sys.argv)

    data = {}
    directory = options.directory
    extensions = map(lambda ext: ext.strip(), options.extensions.split(","))

    def callback(arg, dirname, names):
        # only write the header to the files where the file extension match (.py per default)
        file_names = filter(lambda x: os.path.splitext(x)[-1] in extensions, names)
        # generate a list of full file paths
        file_paths = map(lambda x: os.path.abspath(os.path.join(dirname, x)), file_names)
        # make a mapping of path -> file data
        for path in file_paths:
            lines = open(path, "r").readlines()
            data[path] = lines

    # walk the directory
    os.path.walk(directory, callback, None)

    for path, lines in data.iteritems():
        # The new header
        new_lines = get_template().split("\n")

        marker = False
        for num, line in enumerate(lines):
            if line and line.startswith("#") is False and marker is False:
                print "Found first code line for file {} at {}".format(path, num)
                marker = True

            if marker:
                new_lines.append(line)

        with open(path, "w") as f:
            f.writelines(new_lines)
            print "Wrote header to {}".format(path)

